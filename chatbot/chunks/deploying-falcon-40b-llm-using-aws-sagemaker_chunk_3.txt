It then processes the input text using the generator and returns the generated outputs as a JSON response. To package the directory into a .tar.gz file and upload it to Amazon S3: import tarfile import gzip import shutil import os def create_tar_gz(source_file, output_file): with tarfile.open(output_file, "w:gz") as tar: tar.add(source_file, arcnameos.path.basename(source_file)) source_file "/root/code_container" output_tar_gz "/root/code_packaged.tar.gz" create_tar_gz(source_file, output_tar_gz) bucket sage_session.default_bucket() uploaded_s3 sage_session.upload_data("code_packaged.tar.gz", bucket, 'code_container/deepspeed') You will find the packaged folder in the root directory of the notebook, as shown below: You can use this code to confirm where your packaged file has been uploaded in S3: To see your S3 bucket, search for S3 in the AWS Management Console. The created bucket’s name should begin with sagemaker and contain your packaged file. Here is an example of the bucket created for the uploaded file: To create the falcon40B model using SageMaker: from sagemaker.utils import name_from_base inference_image_uri ( f"763104351884.dkr.ecr.{region}.amazonaws.com/djl-inference:0.22.1-deepspeed0.8.3-cu118" ) model_name_acc name_from_base(f"falcon40b-model-ds") create_model_response maker.create_model( ModelNamemodel_name_acc, ExecutionRoleArnrole, PrimaryContainer{"Image": inference_image_uri, "ModelDataUrl": uploaded_s3}, ) Deploy your endpoint with your instance specifications To find your model name, print your model’s ARN. The model name is found within the printed text, which is in the following format arn:aws:sagemaker:region>:account-id>:model/model-name> . To create your endpoint with its configuration settings, such as the instance type you would like to run it on, use the create_endpoint_config and create_endpoint methods. model_name "falcon40b-model-ds-2023-07-11-07-40-35-915" #replace with your created model name endpoint_config_response maker.create_endpoint_config( EndpointConfigName'falcon40b-model-ds-cf', ProductionVariants[ { "VariantName": "falcon40", #any unique name "ModelName": model_name, "InstanceType": 'ml.g5.24xlarge', "InitialInstanceCount": 1, "ModelDataDownloadTimeoutInSeconds": 3600, "ContainerStartupHealthCheckTimeoutInSeconds": 3600, }, ], ) create_endpoint_response maker.create_endpoint( EndpointName'falcon40b-model-ds-endpt', EndpointConfigName'falcon40b-model-ds-cf' ) In case you encounter a ResourceLimitExceeded error, you can head to the AWS Service Quotas console and request a Quota increase for the number of such types of EC2 instances that you can create. Search for the Service Quotas service in your Console search bar: Search for the Service Quotas service in your Console search bar: Search for SageMaker: Search for ml.g5.24xlarge for endpoint usage , select it and Click ‘Request Quota Increase’: Specify the quota value to 1 : You may proceed when AWS notifies you that your Quota Increase request has been approved. Test your endpoint with custom input data and parameter values After calling the method to create the endpoint, you may have to wait until the creation process is complete.