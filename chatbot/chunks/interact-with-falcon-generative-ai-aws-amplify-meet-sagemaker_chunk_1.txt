After customizing your webpage design with the given elements, follow the instructions on the right-hand side, containing the corresponding terminal commands for dependency installation and code project creation. Open the terminal on your local machine and execute the code to download the dependencies. To retrieve your form’s corresponding code onto your local machine, use the amplify pull command as shown below: For a web application, choose JavaScript: Depending on the front-end framework that you prefer, you have the option to automatically create your project in any of the following. This tutorial will use React. An example of using the Amplify-generated React component as instructed in the App.js file with the imports in the App.js file as instructed in Amplify Studio highlighted below: To be able to make a request as specified in your API (to be seen later), use the fetch method in React to send the user input to the back-end. Most notably, specify the api invoke url with the resource path appended at the end (you will get these from API Gateway in following steps) , method , the headers X-Api-Key and Access-Control-Allow-Origin which will respectively allow for Authentication and CORS verification, and the body containing the user’s message to be processed by the SageMaker endpoint in the backend. For security purposes it is better to save your API Key as an environment variable before you use it. To call this function, retrieving the generated text from SageMaker, pass your user’s message as follows, and use the data returned in your webpage by converting the response to JSON format and accessing the generated_text property’s value within the JSON object. async function fetchResponse(fields) { try{ const response await fetch( "Your-API-INVOKE-URL/PATH-OF-YOUR-RESOURCE", { method: 'POST', headers: { "x-api-key": apiKey, "Access-Control-Allow-Origin": "https://localhost:3000", #To allow access for your undeployed webpage }, body: JSON.stringify({'message': fields}), }); const data response.json(); return data; }catch (error) { console.log('Error:', error); throw error; } } fetchResponse(fields).then(data > { data JSON.parse(data); updateText(data.outputs[0].generated_text); }) .catch(error > { // console.log('Error:', error); }); Setting up the Back End: Create a Lambda Function The purpose of this Lambda function is to invoke your SageMaker endpoint whenever the API is accessed. The steps on how to make your SageMaker endpoint are in the first blog post in the series with special configurations mentioned at the end of this article. First, you must ensure that the status of the endpoint is InService . To do this, search for the SageMaker service in the AWS Management Console, and navigate in the sidebar to Inference > Endpoints. To create a Lambda function, search for the Lambda service in your AWS Management Console and click ‘Create Function’: In the next step, choose the option to ‘Author from scratch’, name your function, and choose the programming language. This tutorial uses the latest version of Python for the function code. For the execution role, select a new role with basic Lambda permissions as shown below. This is crucial to provide the function with the necessary permissions to function as planned and access other AWS services and resources. After creating the function, the execution role should show up in the Configuration tab of the function as shown below: Click the execution role to be redirected to the specific permission policies included in your function’s role, and select ‘Add permissions’: You will need to add permissions to the Role by clicking ‘Create inline policy’: This action redirects you to the page for policy creation where you will click ‘JSON’ to be able to write a JSON description of the required permission in the editor. The following is the JSON form of the required permission which enables the Lambda function to invoke any SageMaker Endpoint. {"Version":"2012-10-17","Statement":[{"Sid":"VisualEditor0","Effect":"Allow","Action":"sagemaker:InvokeEndpoint","Resource":""}]} Then you will name your policy, and, as you can see, the associated permission added allows reading from SageMaker. To confirm that the permission has been successfully added to your Lambda function’s role, check the Permissions tab of the role, and you should see a new permissions policy in the list, similar to what has been shown below: Now that the permissions have been set up, back to the Lambda function. The Lambda function’s task is to interact with the SageMaker endpoint when requested. Thus, the following code will be added to the editor in the Code tab of the function: import json import boto3 runtime boto3.client('runtime.sagemaker') def lambda_handler(event, context): answer runtime.invoke_endpoint( EndpointName 'falcon7b-model-ds-endpt', Body json.dumps({'text': event['message']['Field0'], 'text_length': 300}), ContentType 'application/json' ) return answer["Body"].read().decode('utf8') This will invoke the endpoint, sending the user message from the front-end as input to the endpoint, and return the response decoded to the front end through the API. Note: One last thing to edit is to increase the timeout (for example 2 minutes).