A prototype is something you create to see if your idea is feasible if it’s like a hardware idea or helps you find a happy path for UX for your users to know how they experience your web app or mobile app. Or just to get a visual so that people can see what are you trying to build. So an MVP is not a prototype, and there are certain situations where you build a prototype before you build an MVP or you might have both an MVP and a prototype to be testing things on the side. This is the minimum number of features to test your hypothesis, and it is very important because a lot of people overbuild their MVP. It’s very common, and you especially see a lot of overbuilding when you have people who never been around software development teams before or worked in a software development team. And overbuilding happens when you build features beyond what is needed to test your hypothesis. Lets take Lyft as a good example of an MVP. What is Lyft trying to solve originally when they first released their product? They are trying to see if peer-to-peer transportation could work. So the minimum number of features they need to test their hypothesis is: Driver to be able to sign up and log-in. Rider to be able to log-in and signup. The rider is able to request a driver and driver to be able to find that rider. A form of payment to be exchanged between the two parties which they can take their cut off. That’s all the basic features needed without all the features you see now on Lyft like share your ride on social media or add a stop or hundreds of other features you see now which if they had on their MVP it would have been overbuilding. There are other kinds or other terms referring for the minimum viable product: Viable: It’s the referred to most commonly and it’s a completely new product to test new dimensions of the product. Usable: Minimum Usable Product its to get your product in the hands of customers and make sure it’s usable and get early feedback. Lovable: If you release a minimum lovable product, you are assuming the product existing in the market is disliked by the customers. And you are releasing a minimum lovable product saying that like I think I can do better than x competitor and here’s why. Testable: Minimum Testable Product is good for risky business assumptions for example Airbnb or Lyft. “If you aren’t embarrassed by the first version of your product, you shipped too late.” Reid Hoffman LinkedIn CoFounder Remember it should be very minimal and it doesn’t matter how great the UI or UX looks. It just needs to be functional because you are trying to prove a single hypothesis with the minimum number of features. I’ve met a lot of startup founders who are perfectionists (I’m a perfectionist too) but you shouldn’t wait until you product is perfect but until it’s functional and useful at least at a basic minimal state and ship it out and get people using it and see if they actually like it. Because if they need it and want it they will not really care how it looks like or how beautiful it is.